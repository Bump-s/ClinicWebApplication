// <auto-generated />
using System;
using ClinicApp.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicApp.DAL.Migrations
{
    [DbContext(typeof(EfContext))]
    partial class EfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClinicApp.DAL.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.MedicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvailableHoursForAppointment")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BegintWorkingHour")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoktorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndWorkingHour")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Interval")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Sickness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGetSickness")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRecovered")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoktorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoktorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientComplaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Research")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SicknessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsedDrugs")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.ToTable("Sicknesses");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Appointment", b =>
                {
                    b.HasOne("ClinicApp.DAL.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("ClinicApp.DAL.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Patient", b =>
                {
                    b.HasOne("ClinicApp.DAL.Entities.MedicalHistory", "MedicalHistory")
                        .WithMany()
                        .HasForeignKey("MedicalHistoryId");

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Schedule", b =>
                {
                    b.HasOne("ClinicApp.DAL.Entities.Doctor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId");

                    b.HasOne("ClinicApp.DAL.Entities.Patient", null)
                        .WithMany("Schedules")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doktor");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Sickness", b =>
                {
                    b.HasOne("ClinicApp.DAL.Entities.Doctor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId");

                    b.Navigation("Doktor");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicApp.DAL.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
